use std::{
    fmt,
    mem::size_of,
};

use windows::{
    core::GUID,
    Win32::{
        Foundation::{FILETIME, SYSTEMTIME},
        System::Diagnostics::Etw::{
            TDH_INTYPE_ANSICHAR, TDH_INTYPE_ANSISTRING, TDH_INTYPE_BINARY, TDH_INTYPE_BOOLEAN,
            TDH_INTYPE_COUNTEDANSISTRING, TDH_INTYPE_COUNTEDSTRING, TDH_INTYPE_DOUBLE,
            TDH_INTYPE_FILETIME, TDH_INTYPE_FLOAT, TDH_INTYPE_GUID, TDH_INTYPE_HEXDUMP,
            TDH_INTYPE_HEXINT32, TDH_INTYPE_HEXINT64, TDH_INTYPE_INT16, TDH_INTYPE_INT32,
            TDH_INTYPE_INT64, TDH_INTYPE_INT8, TDH_INTYPE_MANIFEST_COUNTEDANSISTRING,
            TDH_INTYPE_MANIFEST_COUNTEDBINARY, TDH_INTYPE_MANIFEST_COUNTEDSTRING,
            TDH_INTYPE_NONNULLTERMINATEDANSISTRING, TDH_INTYPE_NONNULLTERMINATEDSTRING,
            TDH_INTYPE_NULL, TDH_INTYPE_POINTER, TDH_INTYPE_REVERSEDCOUNTEDANSISTRING,
            TDH_INTYPE_REVERSEDCOUNTEDSTRING, TDH_INTYPE_SID, TDH_INTYPE_SIZET,
            TDH_INTYPE_SYSTEMTIME, TDH_INTYPE_UINT16, TDH_INTYPE_UINT32, TDH_INTYPE_UINT64,
            TDH_INTYPE_UINT8, TDH_INTYPE_UNICODECHAR, TDH_INTYPE_UNICODESTRING, TDH_INTYPE_WBEMSID,
            _TDH_IN_TYPE,
        },
    },
};

#[derive(Debug, Clone, Copy, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
#[cfg_attr(feature = "json_schema", derive(schemars::JsonSchema))]
pub enum InType {
    Null,
    UnicodeString,
    AnsiString,
    Int8,
    UInt8,
    Int16,
    UInt16,
    Int32,
    UInt32,
    Int64,
    UInt64,
    Float,
    Double,
    Boolean,
    Binary,
    Guid,
    Pointer,
    FileTime,
    SystemTime,
    Sid,
    HexInt32,
    HexInt64,
    CountedString,
    CountedAnsiString,
    ReversedCountedString,
    ReversedCountedAnsiString,
    NonNullTerminatedString,
    NonNullTerminatedAnsiString,
    UnicodeChar,
    AnsiChar,
    SizeT,
    HexDump,
    WbemSid,
    ManifestCountedBinary,
    ManifestCountedString,
    ManifestCountedAnsiString,
    Unknown(u16),
}

impl fmt::Display for InType {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        match self {
            Self::Null => f.write_str("Null"),
            Self::UnicodeString => f.write_str("UnicodeString"),
            Self::AnsiString => f.write_str("AnsiString"),
            Self::Int8 => f.write_str("Int8"),
            Self::UInt8 => f.write_str("UInt8"),
            Self::Int16 => f.write_str("Int16"),
            Self::UInt16 => f.write_str("UInt16"),
            Self::Int32 => f.write_str("Int32"),
            Self::UInt32 => f.write_str("UInt32"),
            Self::Int64 => f.write_str("Int64"),
            Self::UInt64 => f.write_str("UInt64"),
            Self::Float => f.write_str("Float"),
            Self::Double => f.write_str("Double"),
            Self::Boolean => f.write_str("Boolean"),
            Self::Binary => f.write_str("Binary"),
            Self::Guid => f.write_str("Guid"),
            Self::Pointer => f.write_str("Pointer"),
            Self::FileTime => f.write_str("FileTime"),
            Self::SystemTime => f.write_str("SystemTime"),
            Self::Sid => f.write_str("Sid"),
            Self::HexInt32 => f.write_str("HexInt32"),
            Self::HexInt64 => f.write_str("HexInt64"),
            Self::CountedString => f.write_str("CountedString"),
            Self::CountedAnsiString => f.write_str("CountedAnsiString"),
            Self::ReversedCountedString => f.write_str("ReversedCountedString"),
            Self::ReversedCountedAnsiString => f.write_str("ReversedCountedAnsiString"),
            Self::NonNullTerminatedString => f.write_str("NonNullTerminatedString"),
            Self::NonNullTerminatedAnsiString => f.write_str("NonNullTerminatedAnsiString"),
            Self::UnicodeChar => f.write_str("UnicodeChar"),
            Self::AnsiChar => f.write_str("AnsiChar"),
            Self::SizeT => f.write_str("SizeT"),
            Self::HexDump => f.write_str("HexDump"),
            Self::WbemSid => f.write_str("WbemSid"),
            Self::ManifestCountedBinary => f.write_str("ManifestCountedBinary"),
            Self::ManifestCountedString => f.write_str("ManifestCountedString"),
            Self::ManifestCountedAnsiString => f.write_str("ManifestCountedAnsiString"),
            Self::Unknown(in_type) => f.write_fmt(format_args!("Unknown({})", *in_type)),
        }
    }
}

impl From<u16> for InType {
    fn from(val: u16) -> Self {
        match _TDH_IN_TYPE(val.into()) {
            TDH_INTYPE_NULL => Self::Null,
            TDH_INTYPE_UNICODESTRING => Self::UnicodeString,
            TDH_INTYPE_ANSISTRING => Self::AnsiString,

            TDH_INTYPE_INT8 => Self::Int8,
            TDH_INTYPE_UINT8 => Self::UInt8,
            TDH_INTYPE_INT16 => Self::Int16,
            TDH_INTYPE_UINT16 => Self::UInt16,
            TDH_INTYPE_INT32 => Self::Int32,
            TDH_INTYPE_UINT32 => Self::UInt32,
            TDH_INTYPE_INT64 => Self::Int64,
            TDH_INTYPE_UINT64 => Self::UInt64,

            TDH_INTYPE_FLOAT => Self::Float,
            TDH_INTYPE_DOUBLE => Self::Double,
            TDH_INTYPE_BOOLEAN => Self::Boolean,
            TDH_INTYPE_BINARY => Self::Binary,
            TDH_INTYPE_GUID => Self::Guid,

            TDH_INTYPE_POINTER => Self::Pointer,
            TDH_INTYPE_FILETIME => Self::FileTime,
            TDH_INTYPE_SID => Self::Sid,
            TDH_INTYPE_HEXINT32 => Self::HexInt32,
            TDH_INTYPE_HEXINT64 => Self::HexInt64,
            TDH_INTYPE_COUNTEDSTRING => Self::CountedString,
            TDH_INTYPE_COUNTEDANSISTRING => Self::CountedAnsiString,
            TDH_INTYPE_REVERSEDCOUNTEDSTRING => Self::ReversedCountedString,
            TDH_INTYPE_REVERSEDCOUNTEDANSISTRING => Self::ReversedCountedAnsiString,
            TDH_INTYPE_NONNULLTERMINATEDSTRING => Self::NonNullTerminatedString,
            TDH_INTYPE_NONNULLTERMINATEDANSISTRING => Self::NonNullTerminatedAnsiString,

            TDH_INTYPE_UNICODECHAR => Self::UnicodeChar,
            TDH_INTYPE_ANSICHAR => Self::AnsiChar,

            TDH_INTYPE_SIZET => Self::SizeT,
            TDH_INTYPE_HEXDUMP => Self::HexDump,
            TDH_INTYPE_WBEMSID => Self::WbemSid,
            TDH_INTYPE_MANIFEST_COUNTEDBINARY => Self::ManifestCountedBinary,
            TDH_INTYPE_MANIFEST_COUNTEDSTRING => Self::ManifestCountedString,
            TDH_INTYPE_MANIFEST_COUNTEDANSISTRING => Self::ManifestCountedAnsiString,
            _ => Self::Unknown(val),
        }
    }
}

impl From<InType> for _TDH_IN_TYPE {
    fn from(value: InType) -> Self {
        match value {
            InType::Null => TDH_INTYPE_NULL,
            InType::UnicodeString => TDH_INTYPE_UNICODESTRING,
            InType::AnsiString => TDH_INTYPE_ANSISTRING,
            InType::Int8 => TDH_INTYPE_INT8,
            InType::UInt8 => TDH_INTYPE_UINT8,
            InType::Int16 => TDH_INTYPE_INT16,
            InType::UInt16 => TDH_INTYPE_UINT16,
            InType::Int32 => TDH_INTYPE_INT32,
            InType::UInt32 => TDH_INTYPE_UINT32,
            InType::Int64 => TDH_INTYPE_INT64,
            InType::UInt64 => TDH_INTYPE_UINT64,
            InType::Float => TDH_INTYPE_FLOAT,
            InType::Double => TDH_INTYPE_DOUBLE,
            InType::Boolean => TDH_INTYPE_BOOLEAN,
            InType::Binary => TDH_INTYPE_BINARY,
            InType::Guid => TDH_INTYPE_GUID,
            InType::Pointer => TDH_INTYPE_POINTER,
            InType::FileTime => TDH_INTYPE_FILETIME,
            InType::SystemTime => TDH_INTYPE_SYSTEMTIME,
            InType::Sid => TDH_INTYPE_SID,
            InType::HexInt32 => TDH_INTYPE_HEXINT32,
            InType::HexInt64 => TDH_INTYPE_HEXINT64,
            InType::CountedString => TDH_INTYPE_COUNTEDSTRING,
            InType::CountedAnsiString => TDH_INTYPE_COUNTEDANSISTRING,
            InType::ReversedCountedString => TDH_INTYPE_REVERSEDCOUNTEDSTRING,
            InType::ReversedCountedAnsiString => TDH_INTYPE_REVERSEDCOUNTEDANSISTRING,
            InType::NonNullTerminatedString => TDH_INTYPE_NONNULLTERMINATEDSTRING,
            InType::NonNullTerminatedAnsiString => TDH_INTYPE_NONNULLTERMINATEDANSISTRING,
            InType::UnicodeChar => TDH_INTYPE_UNICODECHAR,
            InType::AnsiChar => TDH_INTYPE_ANSICHAR,
            InType::SizeT => TDH_INTYPE_SIZET,
            InType::HexDump => TDH_INTYPE_HEXDUMP,
            InType::WbemSid => TDH_INTYPE_WBEMSID,
            InType::ManifestCountedBinary => TDH_INTYPE_MANIFEST_COUNTEDBINARY,
            InType::ManifestCountedString => TDH_INTYPE_MANIFEST_COUNTEDSTRING,
            InType::ManifestCountedAnsiString => TDH_INTYPE_MANIFEST_COUNTEDANSISTRING,
            InType::Unknown(in_type) => _TDH_IN_TYPE(in_type.into()),
        }
    }
}

impl InType {
    /// Returns the size of a given type,
    /// or None if the size is not known at compile time.
    pub fn size(&self) -> Option<usize> {
        match self {
            InType::Null => None,
            InType::UnicodeString => None,
            InType::AnsiString => None,
            InType::Int8 => Some(size_of::<i8>()),
            InType::UInt8 => Some(size_of::<u8>()),
            InType::Int16 => Some(size_of::<i16>()),
            InType::UInt16 => Some(size_of::<u16>()),
            InType::Int32 => Some(size_of::<i32>()),
            InType::UInt32 => Some(size_of::<u32>()),
            InType::Int64 => Some(size_of::<i64>()),
            InType::UInt64 => Some(size_of::<u64>()),
            InType::Float => Some(size_of::<f32>()),
            InType::Double => Some(size_of::<f64>()),
            InType::Boolean => Some(size_of::<u32>()),
            InType::Binary => None,
            InType::Guid => Some(size_of::<GUID>()),
            InType::Pointer => Some(size_of::<usize>()),
            InType::FileTime => Some(size_of::<FILETIME>()),
            InType::SystemTime => Some(size_of::<SYSTEMTIME>()),
            InType::Sid => None,
            InType::HexInt32 => Some(4),
            InType::HexInt64 => Some(8),
            InType::CountedString => None,
            InType::CountedAnsiString => None,
            InType::ReversedCountedString => None,
            InType::ReversedCountedAnsiString => None,
            InType::NonNullTerminatedString => None,
            InType::NonNullTerminatedAnsiString => None,
            InType::UnicodeChar => Some(size_of::<u16>()),
            InType::AnsiChar => Some(size_of::<u8>()),
            InType::SizeT => Some(size_of::<usize>()),
            InType::HexDump => None,
            InType::WbemSid => None,
            InType::ManifestCountedBinary => None,
            InType::ManifestCountedString => None,
            InType::ManifestCountedAnsiString => None,
            InType::Unknown(_) => None,
        }
    }
}
